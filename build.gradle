plugins {
    id 'java-library'
    id 'maven-publish'
    id 'idea'
    id 'net.neoforged.moddev' version '2.0.78'
}
version = minecraft_version + '-' + mod_version
group = mod_group_id
repositories {
    mavenLocal()
    maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
    maven { url = "https://mvn.devos.one/snapshots" } // Registrate
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven" }
}
base { archivesName = mod_id }
java.toolchain.languageVersion = JavaLanguageVersion.of(21)
neoForge {
    version = project.neo_version
    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }
    runs {
        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }
        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }
    mods { "${mod_id}" { sourceSet(sourceSets.main) } }
}
sourceSets.main.resources { srcDir 'src/generated/resources' }
dependencies {
    implementation("com.simibubi.create:create-${minecraft_version}:${create_version}") { transitive = false }
    implementation("net.createmod.ponder:Ponder-NeoForge-${minecraft_version}:${ponder_version}") { transitive = false }
    implementation("com.tterrag.registrate:Registrate:${registrate_version}")
    compileOnly("dev.engine-room.flywheel:flywheel-neoforge-api-${minecraft_version}:${flywheel_version}")
    runtimeOnly("dev.engine-room.flywheel:flywheel-neoforge-${minecraft_version}:${flywheel_version}")
}
var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [minecraft_version    : minecraft_version,
                             mod_id               : mod_id,
                             mod_name             : mod_name,
                             mod_license          : mod_license,
                             mod_version          : mod_version,
                             mod_authors          : mod_authors,
                             mod_display_url      : mod_display_url,
                             mod_issue_tracker_url: mod_issue_tracker_url,
                             mod_description      : mod_description]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
neoForge.ideSyncTask generateModMetadata
publishing {
    publications { register('mavenJava', MavenPublication) { from components.java } }
    repositories { maven { url "file://${project.projectDir}/repo" } }
}
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
